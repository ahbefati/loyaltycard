// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using loyaltycard.Data;

#nullable disable

namespace loyaltycard.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("loyaltycard.Models.Adress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("adress_line")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("district")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("adresses");
                });

            modelBuilder.Entity("loyaltycard.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("branches");
                });

            modelBuilder.Entity("loyaltycard.Models.BranchAdress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("adressId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("branchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("adressId");

                    b.HasIndex("branchId");

                    b.ToTable("branchAdresses");
                });

            modelBuilder.Entity("loyaltycard.Models.CustomerAdress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("adressId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("customerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("adressId");

                    b.HasIndex("customerId");

                    b.ToTable("customerAdresses");
                });

            modelBuilder.Entity("loyaltycard.Models.Customers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("day_of_birth")
                        .HasColumnType("TEXT");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("mail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("loyaltycard.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("branchId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("branchId");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("loyaltycard.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("brand")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("price")
                        .HasColumnType("INTEGER");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("loyaltycard.Models.Sale", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("branchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("customerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("date")
                        .HasColumnType("TEXT");

                    b.Property<int>("employeeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("branchId");

                    b.HasIndex("customerId");

                    b.HasIndex("employeeId");

                    b.ToTable("sales");
                });

            modelBuilder.Entity("loyaltycard.Models.SalesProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("bonus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("cost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("productId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("salesId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("productId");

                    b.HasIndex("salesId");

                    b.ToTable("salesProducts");
                });

            modelBuilder.Entity("loyaltycard.Models.loyaltyCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("customerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("loyaltycard_no")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("register_date")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("customerId");

                    b.ToTable("loyaltyCards");
                });

            modelBuilder.Entity("loyaltycard.Models.BranchAdress", b =>
                {
                    b.HasOne("loyaltycard.Models.Adress", "adress")
                        .WithMany()
                        .HasForeignKey("adressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("loyaltycard.Models.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("adress");

                    b.Navigation("branch");
                });

            modelBuilder.Entity("loyaltycard.Models.CustomerAdress", b =>
                {
                    b.HasOne("loyaltycard.Models.Adress", "adress")
                        .WithMany()
                        .HasForeignKey("adressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("loyaltycard.Models.Customers", "customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("adress");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("loyaltycard.Models.Employee", b =>
                {
                    b.HasOne("loyaltycard.Models.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("branch");
                });

            modelBuilder.Entity("loyaltycard.Models.Sale", b =>
                {
                    b.HasOne("loyaltycard.Models.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("loyaltycard.Models.Customers", "customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("loyaltycard.Models.Employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("branch");

                    b.Navigation("customer");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("loyaltycard.Models.SalesProduct", b =>
                {
                    b.HasOne("loyaltycard.Models.Product", "product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("loyaltycard.Models.Sale", "sales")
                        .WithMany()
                        .HasForeignKey("salesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("sales");
                });

            modelBuilder.Entity("loyaltycard.Models.loyaltyCard", b =>
                {
                    b.HasOne("loyaltycard.Models.Customers", "customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });
#pragma warning restore 612, 618
        }
    }
}
